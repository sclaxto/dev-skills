"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultOptions = {
  method: 'get',
  withCredentials: true
};

var _default = function _default(url, options) {
  return (0, _axios.default)(_objectSpread(_objectSpread({
    url: url
  }, defaultOptions), options)).then(function (response) {
    var status = response.status;

    if (status !== 200) {
      return Promise.reject(new Error("http\u8BF7\u6C42\u5931\u8D25\uFF0C\u72B6\u6001\u7801\uFF1A".concat(status)));
    }

    var _response$data = response.data,
        code = _response$data.code,
        data = _response$data.data,
        msg = _response$data.msg;

    if (code !== 200 && code !== 0) {
      console.error('===request error:');
      console.error('code:', code);
      console.error('msg:', msg);
      console.error('data:', data);
      return Promise.reject(new Error("\u63A5\u53E3\u8FD4\u56DE\u5931\u8D25\uFF0Ccode\uFF1A".concat(code)));
    }

    return Promise.resolve(data);
  });
};

exports.default = _default;