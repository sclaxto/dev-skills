"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.resetModels = void 0;

var _dvaNoRouter = _interopRequireDefault(require("dva-no-router"));

var _dvaLoading = _interopRequireWildcard(require("./plugins/dva-loading"));

var _models = _interopRequireDefault(require("../models"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var app;

var installModels = function installModels() {
  _models.default.forEach(function (model) {
    app.model(model.default);
  });
};

var resetModels = function resetModels() {
  var namespaces = _models.default.map(function (model) {
    return model.default.namespace;
  });

  namespaces.forEach(function (namespace) {
    app._store.dispatch({
      type: "".concat(namespace, "/resetState")
    });
  });

  app._store.dispatch({
    type: "".concat(_dvaLoading.RESET)
  });
};

exports.resetModels = resetModels;

var _default = function _default(router) {
  app = (0, _dvaNoRouter.default)({
    onError: function onError() {}
  });
  app.use((0, _dvaLoading.default)());
  installModels(app);
  app.router(function () {
    return router;
  });
  var Provider = app.start();
  return {
    Provider: Provider,
    app: app
  };
};

exports.default = _default;