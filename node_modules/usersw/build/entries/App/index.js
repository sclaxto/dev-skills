"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _App = _interopRequireDefault(require("./App"));

var _dva = _interopRequireDefault(require("../../dva/dva"));

var _serviceUtils = require("../../service/service-utils");

var _utils = require("../../utils/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// 解决外部引用时的传参问题
var AppWrap =
/*#__PURE__*/
function (_Component) {
  _inherits(AppWrap, _Component);

  /* eslint-disable react/require-default-props, react/no-unused-prop-types */

  /* eslint-enable */
  function AppWrap(_props) {
    var _this;

    _classCallCheck(this, AppWrap);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AppWrap).call(this, _props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleUpdateState", function (props) {
      var app = _this.dvaInstance.app;

      var sourceParam = props.sourceParam,
          APIEnv = props.APIEnv,
          className = props.className,
          industryType = props.industryType,
          corpid = props.corpid,
          appId = props.appId,
          appName = props.appName,
          onError = props.onError,
          userFilterType = props.userFilterType,
          isMultiOrg = props.isMultiOrg,
          setDefaultUser = props.setDefaultUser,
          onShowCompChange = props.onShowCompChange,
          _props$showCompChange = props.showCompChange,
          showCompChange = _props$showCompChange === void 0 ? true : _props$showCompChange,
          _props$customName = props.customName,
          customName = _props$customName === void 0 ? null : _props$customName,
          _props$setSpecialBg = props.setSpecialBg,
          setSpecialBg = _props$setSpecialBg === void 0 ? false : _props$setSpecialBg,
          showBackBtn = props.showBackBtn,
          onBack = props.onBack,
          backUrl = props.backUrl,
          getUserState = props.getUserState,
          onOk = props.onOk,
          replaceUserName = props.replaceUserName,
          otherProps = _objectWithoutProperties(props, ["sourceParam", "APIEnv", "className", "industryType", "corpid", "appId", "appName", "onError", "userFilterType", "isMultiOrg", "setDefaultUser", "onShowCompChange", "showCompChange", "customName", "setSpecialBg", "showBackBtn", "onBack", "backUrl", "getUserState", "onOk", "replaceUserName"]); // 判断登录来源、展示组织以及展示的身份


      var _getOrgAndUserTypeInf = (0, _utils.getOrgAndUserTypeInfo)({
        userFilterType: userFilterType,
        isMultiOrg: isMultiOrg,
        sourceParam: sourceParam
      }),
          newUserFilterType = _getOrgAndUserTypeInf.userFilterType,
          newIsMultiOrg = _getOrgAndUserTypeInf.isMultiOrg,
          newSourceParam = _getOrgAndUserTypeInf.sourceParam; // 设置默认参数


      (0, _serviceUtils.setEnv)({
        corpid: corpid,
        appId: appId,
        appName: appName,
        APIEnv: APIEnv,
        industryType: industryType
      });

      app._store.dispatch({
        type: 'global/saveState',
        payload: {
          className: className,
          corpid: corpid,
          appId: appId,
          appName: appName,
          onError: onError,
          APIEnv: APIEnv,
          industryType: industryType,
          sourceParam: newSourceParam,
          userFilterType: newUserFilterType,
          isMultiOrg: newIsMultiOrg,
          setDefaultUser: setDefaultUser,
          onShowCompChange: onShowCompChange,
          showCompChange: showCompChange,
          customName: customName,
          showBackBtn: showBackBtn,
          setSpecialBg: setSpecialBg,
          onBack: onBack,
          backUrl: backUrl,
          getUserState: getUserState,
          onOk: onOk,
          replaceUserName: replaceUserName
        }
      });

      app._store.dispatch({
        type: 'user/saveState',
        payload: otherProps
      });
    });

    _this.dvaInstance = (0, _dva.default)(_react.default.createElement(_App.default, null));

    _this.handleUpdateState(_props);

    return _this;
  }

  _createClass(AppWrap, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      this.handleUpdateState(nextProps);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$dvaInstance = this.dvaInstance,
          Provider = _this$dvaInstance.Provider,
          app = _this$dvaInstance.app;
      return _react.default.createElement(Provider, {
        store: app._store
      }, _react.default.createElement(_App.default, null));
    }
  }]);

  return AppWrap;
}(_react.Component);

exports.default = AppWrap;

_defineProperty(AppWrap, "propTypes", {
  className: _propTypes.default.string,
  // showComp: PropTypes.bool.isRequired, //  必填: 是否展示modal
  corpid: _propTypes.default.string.isRequired,
  appId: _propTypes.default.number.isRequired,
  appName: _propTypes.default.string.isRequired,
  onOk: _propTypes.default.func,
  // 选填： 确认选中对象时的回调
  onCancel: _propTypes.default.func,
  // 选填： 取消时的回调
  getUserState: _propTypes.default.func,
  // 选填： 初始化时确认 当前/默认 用户身份信息的回调
  onError: _propTypes.default.func,
  // 选填： 组件报错的回调
  renderTitleBar: _propTypes.default.func,
  // 选填： 自定义顶部标题栏展示的方法
  onBack: _propTypes.default.func,
  // 选填： 返回按钮的回调
  APIEnv: _propTypes.default.oneOf(['dev', 'sit', 'production']),
  // 运行环境 默认测试环境
  userFilterType: _propTypes.default.oneOf([1, 2, 3]),
  // 选填： 用户过滤类型， 1: 展示教师 2:展示学生 3: 展示老师和学生
  isMultiOrg: _propTypes.default.oneOf([0, 1]),
  // 选填，是否多组织，0:单组织 1: 多组织
  sourceParam: _propTypes.default.oneOf([1, 2]),
  // 登录来源 1： 工作台/2： 单应用，默认取url上面sourceParam，当sourceParam===mobile-workbench-portal时，表示工作台
  setDefaultUser: _propTypes.default.bool,
  // 是否默认选择首个用户用户
  onShowCompChange: _propTypes.default.func,
  // 展示 选择modal 状态改变的回调
  showCompChange: _propTypes.default.bool,
  // 是否可切换
  customName: _propTypes.default.string,
  // 自定义name
  setSpecialBg: _propTypes.default.bool,
  // 是否更改背景色
  showBackBtn: _propTypes.default.bool,
  // 选填： 是否展示返回按钮
  backUrl: _propTypes.default.string,
  // 选填：返回链接
  replaceUserName: _propTypes.default.bool // 选填：是否使用通讯录展示组件替换userName

});