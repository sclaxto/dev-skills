"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ssMobileToast = _interopRequireDefault(require("ss-mobile-toast"));

var _service = require("../service/service");

var _utils = require("../utils/utils");

var _utils2 = require("../service/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var initState = {
  onOk: null,
  onCancle: null,
  renderTitleBar: null,
  // 选填： 自定义顶部标题栏展示的方法
  onBack: null,
  // 选填： 返回按钮的回调
  userList: [],
  // 用户列表
  currentUserInfo: null // 当前用户信息

};
var _default = {
  namespace: 'user',
  state: initState,
  effects: {
    fetchInitUserInfo:
    /*#__PURE__*/
    regeneratorRuntime.mark(function fetchInitUserInfo(_ref, _ref2) {
      var params, onOk, put, take, setDefaultUser, otherParams, currentOrgId, userList, currentUserInfo, payload, curUserPromise, userListPromise, currentOrgUserList, _ref5, _ref6;

      return regeneratorRuntime.wrap(function fetchInitUserInfo$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              params = _ref.params, onOk = _ref.onOk;
              put = _ref2.put, take = _ref2.take;
              _context.prev = 2;
              // Toast.loading('加载中');
              setDefaultUser = params.setDefaultUser, otherParams = _objectWithoutProperties(params, ["setDefaultUser"]);
              userList = [];
              currentUserInfo = null;
              payload = {}; // 获取当前身份

              _context.next = 9;
              return put({
                type: 'fetchCurrentUserInfo',
                params: params
              });

            case 9:
              curUserPromise = _context.sent;
              _context.next = 12;
              return curUserPromise.then(function (res) {
                currentUserInfo = res;
              });

            case 12:
              if (currentUserInfo) {
                _context.next = 34;
                break;
              }

              _context.next = 15;
              return put({
                type: 'fetchUserList',
                params: otherParams
              });

            case 15:
              userListPromise = _context.sent;
              _context.next = 18;
              return userListPromise.then(function (_ref3) {
                var curOrgId = _ref3.curOrgId,
                    users = _ref3.users;
                userList = users;
                currentOrgId = curOrgId;
              });

            case 18:
              if (!(!userList || !userList.length)) {
                _context.next = 22;
                break;
              }

              _ssMobileToast.default.hide();

              _ssMobileToast.default.info('未找到当前用户信息！');

              return _context.abrupt("return", Promise.resolve({
                userInfo: null,
                userIdentityState: _utils.NONE,
                userCountState: _utils.NONE
              }));

            case 22:
              payload = {
                userList: userList
              };
              /**
               * 前端设置默认用户
               * 条件1：没有已选中用户
               * 条件2： setDefaultUser=== true || 该用户只有一个身份
               */

              if (!(!!setDefaultUser || userList.length === 1)) {
                _context.next = 32;
                break;
              }

              // 查找当前组织用户列表
              currentOrgUserList = userList.filter(function (_ref4) {
                var _ref4$orgId = _ref4.orgId,
                    orgId = _ref4$orgId === void 0 ? '' : _ref4$orgId;
                return currentOrgId === orgId;
              }); // 默认用户身份首选当前组织的第一个用户，其次才是当前列表的第一个用户

              _ref5 = currentOrgUserList.length > 0 ? currentOrgUserList : userList;
              _ref6 = _slicedToArray(_ref5, 1);
              currentUserInfo = _ref6[0];
              _context.next = 30;
              return put({
                type: 'setCurrentUserInfo',
                params: currentUserInfo,
                onOk: onOk
              });

            case 30:
              _context.next = 32;
              return take('setCurrentUserInfo/@@end');

            case 32:
              _context.next = 35;
              break;

            case 34:
              payload.currentUserInfo = currentUserInfo;

            case 35:
              _context.next = 37;
              return put({
                type: 'saveState',
                payload: payload
              });

            case 37:
              _context.next = 39;
              return put({
                type: 'global/showCompChange',
                params: {
                  status: !currentUserInfo
                }
              });

            case 39:
              _ssMobileToast.default.hide();

              return _context.abrupt("return", Promise.resolve(_objectSpread({
                userInfo: currentUserInfo
              }, (0, _utils.getUserState)({
                userList: userList
              }))));

            case 43:
              _context.prev = 43;
              _context.t0 = _context["catch"](2);
              console.log('TCL: *initUserInfo -> error', _context.t0);

              _ssMobileToast.default.hide();

              return _context.abrupt("return", Promise.reject());

            case 48:
            case "end":
              return _context.stop();
          }
        }
      }, fetchInitUserInfo, this, [[2, 43]]);
    }),
    fetchUserListData:
    /*#__PURE__*/
    regeneratorRuntime.mark(function fetchUserListData(_ref7, _ref8) {
      var params, call, put, res;
      return regeneratorRuntime.wrap(function fetchUserListData$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              params = _ref7.params;
              call = _ref8.call, put = _ref8.put;
              _context2.prev = 2;
              _context2.next = 5;
              return call(_service.queryUserList, params);

            case 5:
              res = _context2.sent;
              _context2.next = 8;
              return put({
                type: 'saveState',
                payload: {
                  userList: res
                }
              });

            case 8:
              _ssMobileToast.default.hide();

              return _context2.abrupt("return", Promise.resolve(res));

            case 12:
              _context2.prev = 12;
              _context2.t0 = _context2["catch"](2);
              console.log('TCL: *fetchUserList -> error', _context2.t0);

              _ssMobileToast.default.hide();

              _ssMobileToast.default.info("\u83B7\u53D6\u7528\u6237\u8EAB\u4EFD\u5217\u8868\u5931\u8D25\uFF1A ".concat(_context2.t0.msg || '网络错误，请重试'));

              return _context2.abrupt("return", Promise.reject(_context2.t0));

            case 18:
            case "end":
              return _context2.stop();
          }
        }
      }, fetchUserListData, this, [[2, 12]]);
    }),
    // 获取用户列表
    fetchUserList:
    /*#__PURE__*/
    regeneratorRuntime.mark(function fetchUserList(_ref9, _ref10) {
      var params, call, res;
      return regeneratorRuntime.wrap(function fetchUserList$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              params = _ref9.params;
              call = _ref10.call;
              _context3.prev = 2;
              _context3.next = 5;
              return call(_service.queryUserList, _objectSpread({}, params));

            case 5:
              res = _context3.sent;
              return _context3.abrupt("return", Promise.resolve(res));

            case 9:
              _context3.prev = 9;
              _context3.t0 = _context3["catch"](2);
              console.log('TCL: *fetchUserList -> error', _context3.t0);

              _ssMobileToast.default.hide();

              _ssMobileToast.default.info("\u83B7\u53D6\u7528\u6237\u8EAB\u4EFD\u5217\u8868\u5931\u8D25\uFF1A ".concat(_context3.t0.msg || '网络错误，请重试'));

              return _context3.abrupt("return", Promise.reject(_context3.t0));

            case 15:
            case "end":
              return _context3.stop();
          }
        }
      }, fetchUserList, this, [[2, 9]]);
    }),
    // 获取当前用户
    fetchCurrentUserInfo:
    /*#__PURE__*/
    regeneratorRuntime.mark(function fetchCurrentUserInfo(_ref11, _ref12) {
      var params, call, res, userFilterType, currentUserInfo;
      return regeneratorRuntime.wrap(function fetchCurrentUserInfo$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              params = _ref11.params;
              call = _ref12.call;
              _context4.prev = 2;
              _context4.next = 5;
              return call(_service.queryCurrentUserInfo);

            case 5:
              res = _context4.sent;
              userFilterType = params.userFilterType; // 过滤当前用户信息 返回正确的当前用户信息

              currentUserInfo = (0, _utils.getCurrentUserInfo)({
                currentUserInfo: _objectSpread({}, res, {
                  userFilterType: userFilterType,
                  userType: res.userType
                })
              });
              return _context4.abrupt("return", Promise.resolve(currentUserInfo));

            case 11:
              _context4.prev = 11;
              _context4.t0 = _context4["catch"](2);
              console.log('TCL: *fetchCurrentUserInfo -> error', _context4.t0);

              _ssMobileToast.default.hide();

              _ssMobileToast.default.info("\u83B7\u53D6\u5F53\u524D\u7528\u6237\u8EAB\u4EFD\u5931\u8D25\uFF1A ".concat(_context4.t0.msg || '网络错误，请重试'));

              return _context4.abrupt("return", Promise.reject(_context4.t0));

            case 17:
            case "end":
              return _context4.stop();
          }
        }
      }, fetchCurrentUserInfo, this, [[2, 11]]);
    }),
    // 设置当前用户
    setCurrentUserInfo:
    /*#__PURE__*/
    regeneratorRuntime.mark(function setCurrentUserInfo(_ref13, _ref14) {
      var params, onOk, put, call, select, _ref15, currentUserInfo, res;

      return regeneratorRuntime.wrap(function setCurrentUserInfo$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              params = _ref13.params, onOk = _ref13.onOk;
              put = _ref14.put, call = _ref14.call, select = _ref14.select;
              _context5.prev = 2;
              _context5.next = 5;
              return select(function (state) {
                return state.user;
              });

            case 5:
              _ref15 = _context5.sent;
              currentUserInfo = _ref15.currentUserInfo;

              if (!(!currentUserInfo || currentUserInfo.userId !== params.userId)) {
                _context5.next = 17;
                break;
              }

              _context5.next = 10;
              return call(_service.setCurrentUser, _objectSpread({}, params, {
                from: 'qy_wx',
                client_id: _utils2.ENV,
                client_secret: _utils2.ENV
              }));

            case 10:
              res = _context5.sent;
              window.token = "Bearer ".concat(res.accessToken);
              _context5.next = 14;
              return put({
                type: 'global/showCompChange',
                params: {
                  status: false
                }
              });

            case 14:
              _context5.next = 16;
              return put({
                type: 'saveState',
                payload: {
                  currentUserInfo: params
                }
              });

            case 16:
              // if (res) {
              //   yield put({
              //     type: 'fetchInitUserInfo',
              //     getUserState,
              //     onOk,
              //   }).then(res3 => {
              //     if (getUserState) {
              //       getUserState(res3);
              //     }
              //   });
              // }
              // 将当前用户信息回传给用户
              if (onOk) {
                onOk({
                  userInfo: params
                });
              }

            case 17:
              _ssMobileToast.default.hide();

              _context5.next = 25;
              break;

            case 20:
              _context5.prev = 20;
              _context5.t0 = _context5["catch"](2);
              console.log('TCL: *setCurrentUserInfo -> error', _context5.t0);

              _ssMobileToast.default.hide();

              _ssMobileToast.default.info("\u83B7\u53D6\u8BBE\u7F6E\u5F53\u524D\u7528\u6237\u5931\u8D25\uFF1A ".concat(_context5.t0.msg || '网络错误，请重试'));

            case 25:
            case "end":
              return _context5.stop();
          }
        }
      }, setCurrentUserInfo, this, [[2, 20]]);
    })
  },
  reducers: {
    resetState: function resetState() {
      return initState;
    },
    saveState: function saveState(state, _ref16) {
      var payload = _ref16.payload;
      // debugger;
      return _objectSpread({}, state, payload);
    }
  }
};
exports.default = _default;