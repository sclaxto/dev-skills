"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initState = {
  className: '',
  // 附加样式
  showComp: false,
  // 必填: 是否展示modal
  setSpecialBg: false,
  // 不必填: 是否更改背景
  corpid: null,
  appId: null,
  appName: null,
  onError: null,
  // 错误回调
  APIEnv: null,
  // 运行环境
  userFilterType: null,
  // 选填： 用户过滤类型， 1: 展示教师 2:展示学生 3: 展示老师和学生
  isMultiOrg: null,
  // 选填，是否多组织，0:单组织 1: 多组织
  sourceParam: 1,
  // 登录来源 1： 工作台/2： 单应用，默认取url上面sourceParam，当sourceParam===mobile-workbench-portal时，表示工作台
  getUserState: null,
  //  选填： 初始化时确认 当前/默认 用户身份信息的回调
  setDefaultUser: false,
  onShowCompChange: null,
  showCompChange: true,
  customName: null,
  showBackBtn: false,
  backUrl: null,
  onBack: null,
  replaceUserName: false // 选填：是否使用通讯录展示组件替换userName

};
var _default = {
  namespace: 'global',
  state: initState,
  effects: {
    // 修改选择框的显示状态
    showCompChange:
    /*#__PURE__*/
    regeneratorRuntime.mark(function showCompChange(_ref, _ref2) {
      var params, put, select, status, _ref3, onShowCompChange, showComp;

      return regeneratorRuntime.wrap(function showCompChange$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              params = _ref.params;
              put = _ref2.put, select = _ref2.select;
              status = params.status;
              _context.next = 5;
              return select(function (state) {
                return state.global;
              });

            case 5:
              _ref3 = _context.sent;
              onShowCompChange = _ref3.onShowCompChange;
              showComp = _ref3.showComp;

              if (!(showComp === status)) {
                _context.next = 10;
                break;
              }

              return _context.abrupt("return");

            case 10:
              _context.next = 12;
              return put({
                type: 'saveState',
                payload: {
                  showComp: status
                }
              });

            case 12:
              if (onShowCompChange) {
                onShowCompChange(status);
              }

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, showCompChange, this);
    })
  },
  reducers: {
    resetState: function resetState() {
      return initState;
    },
    saveState: function saveState(state, _ref4) {
      var payload = _ref4.payload;
      return _objectSpread({}, state, payload);
    }
  }
};
exports.default = _default;