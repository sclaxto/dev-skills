"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _component = _interopRequireDefault(require("./component"));

require("./index.less");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Test =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Test, _React$Component);

  function Test(props) {
    var _this;

    _classCallCheck(this, Test);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Test).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleGetCurrentUserInfo", function (_ref) {
      var userInfo = _ref.userInfo,
          userIdentityState = _ref.userIdentityState,
          userCountState = _ref.userCountState;
      console.log('TCL: Test -> handleGetCurrentUserInfo -> userCountState', userCountState);
      console.log('TCL: Test -> handleGetCurrentUserInfo -> userIdentityState', userIdentityState);
      console.log('TCL: Test -> handleGetCurrentUserInfo -> userInfo', userInfo);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleShowCompChange", function (data) {
      console.log('TCL: Test -> handleShowCompChange -> data', data);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleOk", function (data) {
      console.log('TCL: data', data);
    });

    _this.state = {
      showComp: false,
      visible: false
    };
    return _this;
  }

  _createClass(Test, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      console.log(window, 'window.authcenter.ready');
      window.authcenter.ready(function () {
        console.log(333);

        _this2.setState({
          visible: true
        });
      });
    } // 获取当前用户状态  当前用户信息、用户身份状态(单身份还是多身份)、用户UserId数量 该方法在初始化时 获取身份列表、当前用户身份以及设置默认用户之后执行

  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          showComp = _this$state.showComp,
          visible = _this$state.visible;
      var props = {
        corpid: 'ww3327203d63655821',
        industryType: 'education',
        appId: 40,
        appName: '通知',
        APIEnv: 'dev',
        showComp: showComp,
        setSpecialBg: false,
        onOk: this.handleOk,
        cancle: this.handleCancel,
        setDefaultUser: true,
        userFilterType: 1,
        isMultiOrg: 0,
        sourceParam: 2,
        showBackBtn: false,
        // showCompChange: false,
        // customName: '测试',
        getUserState: this.handleGetCurrentUserInfo,
        // onShowCompChange: this.handleShowCompChange,
        renderTitleBar: function renderTitleBar() {
          return _react.default.createElement("div", null, "333");
        } // replaceUserName: 'xxx',
        // showBackBtn: true,

      };
      return _react.default.createElement("div", {
        style: {
          paddingTop: '50px'
        }
      }, visible && _react.default.createElement(_component.default, _extends({
        className: "customer-class-name"
      }, props)));
    }
  }]);

  return Test;
}(_react.default.Component);

_reactDom.default.render(_react.default.createElement(Test, null), document.getElementById('root'));