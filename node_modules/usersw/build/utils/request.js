"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _axios = _interopRequireDefault(require("axios"));

var _qs = require("qs");

var _serviceUtils = require("../service/service-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultOptions = {
  method: 'get',
  withCredentials: true,
  timeout: 10 * 1000
};

var _default = function _default(url) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;
  // 设置默认参数
  var newUrl = url;

  if (url.indexOf('?') > -1) {
    newUrl = "".concat(newUrl, "&").concat((0, _qs.stringify)({
      corpId: _serviceUtils.CORPID,
      appId: _serviceUtils.APPID,
      appName: _serviceUtils.APPNAME,
      industryType: _serviceUtils.INDUSTRYTYPE || 'education'
    }));
  } else {
    newUrl = "".concat(newUrl, "?").concat((0, _qs.stringify)({
      corpId: _serviceUtils.CORPID,
      appId: _serviceUtils.APPID,
      appName: _serviceUtils.APPNAME,
      industryType: _serviceUtils.INDUSTRYTYPE || 'education'
    }));
  }

  return (0, _axios.default)(_objectSpread({
    url: newUrl
  }, defaultOptions, options)).then(function (response) {
    var status = response.status;

    if (status !== 200) {
      return Promise.reject(new Error("http\u8BF7\u6C42\u5931\u8D25\uFF0C\u72B6\u6001\u7801\uFF1A".concat(status)));
    }

    var _response$data = response.data,
        code = _response$data.code,
        data = _response$data.data,
        msg = _response$data.msg;

    if (code !== 200 && code !== 0) {
      console.error('===request error:');
      console.error('code:', code);
      console.error('msg:', msg);
      console.error('data:', data);
      var errMsg = String(msg).length > 50 ? '接口请求失败' : String(msg);
      return Promise.reject(new Error("\u63A5\u53E3\u8FD4\u56DE\u5931\u8D25\uFF0Ccode\uFF1A".concat(code, "\uFF0C").concat(errMsg)));
    }

    return Promise.resolve(data);
  });
};

exports.default = _default;