"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GetBrowserType = GetBrowserType;
exports.getOrgAndUserTypeInfo = getOrgAndUserTypeInfo;
exports.getCurrentUserInfo = getCurrentUserInfo;
exports.getUserState = getUserState;
exports.MULTI = exports.SINGLE = exports.NONE = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var NONE = 'none';
exports.NONE = NONE;
var SINGLE = 'single';
exports.SINGLE = SINGLE;
var MULTI = 'multi';
/**
 * 用于获取浏览器类型
 * wxwork: 企业微信
 * wx： 微信
 */

exports.MULTI = MULTI;

function GetBrowserType() {
  var ua = window.navigator.userAgent.toLowerCase();
  var wxPattern = /micromessenger/i;
  var wxworkPattern = /wxwork/i;

  if (wxPattern.test(ua) && wxworkPattern.test(ua)) {
    return 'wxwork';
  } else if (wxPattern.test(ua)) {
    return 'wx';
  }

  return null;
}

function GetQueryString(name) {
  var regArr = new RegExp("(^|&)".concat(name, "=([^&]*)(&|$)"));
  var r = window.location.search.substr(1).match(regArr);

  if (r != null) {
    return decodeURIComponent(r[2]);
  }

  return null;
}
/**
 *
 * @param {Number} userFilterType : 用户过滤类型， 1: 展示教师 2:展示学生 3: 展示老师和学生
 * @param {Number} isMultiOrg: 是否多组织，0:单组织 1: 多组织
 */


function getOrgAndUserTypeInfo(_ref) {
  var _ref$userFilterType = _ref.userFilterType,
      userFilterType = _ref$userFilterType === void 0 ? '' : _ref$userFilterType,
      _ref$isMultiOrg = _ref.isMultiOrg,
      isMultiOrg = _ref$isMultiOrg === void 0 ? '' : _ref$isMultiOrg,
      _ref$sourceParam = _ref.sourceParam,
      sourceParam = _ref$sourceParam === void 0 ? '' : _ref$sourceParam;
  var urlSourceParam = GetQueryString('sourceParam');
  var newSourceParam = urlSourceParam === 'mobile-workbench-portal' ? 1 : 2; // 登录来源 1:工作台 2:单应用

  var isWXWork = GetBrowserType() === 'wxwork'; // 是否是企业微信

  var newIsMultiOrg = isMultiOrg === 1 ? 1 : 0; // 是否多组织，0:单组织 1: 多组织

  var newUserFilterType = isWXWork ? 1 : 2; // 微信展示 2:学生， 企业微信展示 1: 教师
  // 如果外部传参则采用外部参数

  if (userFilterType) {
    newUserFilterType = userFilterType;
  }

  if (sourceParam) {
    newSourceParam = sourceParam;
  }

  return {
    userFilterType: newUserFilterType,
    isMultiOrg: newIsMultiOrg,
    sourceParam: newSourceParam
  };
}
/**
 * 判断是否有当前用户,并返回最终的用户信息
 * @param {Object} currentUserInfo: 当前用户信息
 * @param {Array<Object>} userFilterType  :用户过滤类型
 */


function getCurrentUserInfo(_ref2) {
  var currentUserInfo = _ref2.currentUserInfo,
      userFilterType = _ref2.userFilterType;

  if (!currentUserInfo) {
    return null;
  }

  if ((userFilterType === 1 || userFilterType === 2) && currentUserInfo.userType !== userFilterType) {
    return null;
  }

  return currentUserInfo;
}
/**
 * 获取用户状态
 * @param {Array<Object>} userList: 用户身份列表
 */


function getUserState(_ref3) {
  var userList = _ref3.userList;
  var userIdentityState = NONE; // 用户身份状态

  var userCountState = NONE; // 用户角色数量状态

  if (!userList && !!userList.length) {
    // 根据用户列表判断 用户身份状态
    userCountState = userList.length > 1 ? MULTI : SINGLE; // 获取用户身份列表  根据用户身份数量判断 用户角色数量状态

    var userTypeList = _toConsumableArray(new Set(userList.map(function (_ref4) {
      var userType = _ref4.userType;
      return userType;
    })));

    userIdentityState = userTypeList.length > 1 ? MULTI : SINGLE;
  }

  return {
    userIdentityState: userIdentityState,
    userCountState: userCountState
  };
}