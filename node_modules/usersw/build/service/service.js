"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryUserList = queryUserList;
exports.queryCurrentUserInfo = queryCurrentUserInfo;
exports.setCurrentUser = setCurrentUser;

var _qs = require("qs");

var _request = _interopRequireDefault(require("../utils/request"));

var _serviceUtils = require("./service-utils.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * 获取用户列表
 * 后端：黄金先
 * 前端： 刘杰
 * @param {number} userFilterType: 用户过滤类型,1: 展示教师 2:展示学生 3: 展示老师和学生
 * @param {number} isMultiOrg: 是否多组织,0:单组织 1: 多组织
 * @param {number} launchSource：1: 工作台 2:微信单应用
 */
function queryUserList() {
  return _queryUserList.apply(this, arguments);
}
/**
 * 获取当前登录用户
 * 后端：黄金先
 * 前端： 刘杰
 */


function _queryUserList() {
  _queryUserList = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", (0, _request.default)("".concat(_serviceUtils.url.usercenter, "/switch/user"), {
              headers: {
                Authorization: window.token
              }
            }));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _queryUserList.apply(this, arguments);
}

function queryCurrentUserInfo() {
  return _queryCurrentUserInfo.apply(this, arguments);
}
/**
 * 设置当前用户
 * 后端：黄金先
 * 前端： 刘杰
 * @param {*} params ：{orgid,orgName,userId,userName,userType}
 */


function _queryCurrentUserInfo() {
  _queryCurrentUserInfo = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2() {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", (0, _request.default)("".concat(_serviceUtils.url.url, "/oauth/loginInfo"), {
              headers: {
                Authorization: window.token
              }
            }));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _queryCurrentUserInfo.apply(this, arguments);
}

function setCurrentUser(_x) {
  return _setCurrentUser.apply(this, arguments);
}

function _setCurrentUser() {
  _setCurrentUser = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(params) {
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", (0, _request.default)("".concat(_serviceUtils.url.url, "/oauth/token?").concat((0, _qs.stringify)(params)), {
              method: 'GET'
            }));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return _setCurrentUser.apply(this, arguments);
}